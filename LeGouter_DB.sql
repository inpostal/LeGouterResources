-- Create LeGouter Project DB--
-- CHA101 G6 --

-- 建立資料庫
drop schema if EXISTS LeGouter;
create schema LeGouter;
use Legouter;

-----------------------------------------------------------------------------------------

-- 會員
drop table IF EXISTS members;
CREATE TABLE MEMBERS (
  MEM_ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  MEM_CLASSIFY TINYINT(1) NOT NULL,
  MEM_NAME VARCHAR(45) NOT NULL,
  MEM_ACCOUNT VARCHAR(20) NOT NULL,
  MEM_PASSWORD VARCHAR(20) NOT NULL,
  MEM_GENDER CHAR(1) NOT NULL,
  MEM_PHONE VARCHAR(10) NOT NULL,
  MEM_EMAIL VARCHAR(40) NOT NULL,
  MEM_ADDRES VARCHAR(100),
  MEM_BIRTHDAY DATE NOT NULL,
  MEM_STATUS TINYINT(1) DEFAULT 0,
  MEM_REGIS_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 會員假資料
INSERT INTO MEMBERS (MEM_CLASSIFY, MEM_NAME, MEM_ACCOUNT, MEM_PASSWORD, MEM_GENDER, MEM_PHONE, MEM_EMAIL, MEM_ADDRES, MEM_BIRTHDAY, MEM_STATUS, MEM_REGIS_TIME)
VALUES
  (0, '張三', 'zhangsan', 'password1', 'm', '0912345678', 'zhangsan@example.com', '台北市中正區', '1990-01-01', 0, CURRENT_TIMESTAMP),
  (1, '李四', 'lisi', 'password2', 'm', '0923456789', 'lisi@example.com', '新北市板橋區', '1992-02-02', 0, CURRENT_TIMESTAMP),
  (0, '王五', 'wangwu', 'password3', 'm', '0934567890', 'wangwu@example.com', '桃園市桃園區', '1994-03-03', 0, CURRENT_TIMESTAMP),
  (0, '趙六', 'zhaoliu', 'password4', 'f', '0945678901', 'zhaoliu@example.com', '新竹市東區', '1996-04-04', 0, CURRENT_TIMESTAMP),
  (1, '孫七', 'sunqi', 'password5', 'f', '0956789012', 'sunqi@example.com', '台中市西區', '1998-05-05', 0, CURRENT_TIMESTAMP),
  (0, '周八', 'zhouba', 'password6', 'm', '0967890123', 'zhouba@example.com', '台南市南區', '2000-06-06', 0, CURRENT_TIMESTAMP),
  (0, '吳九', 'wujiu', 'password7', 'f', '0978901234', 'wujiu@example.com', '高雄市左營區', '2002-07-07', 0, CURRENT_TIMESTAMP),
  (1, '郭十', 'guoshi', 'password8', 'm', '0989012345', 'guoshi@example.com', '基隆市安樂區', '2004-08-08', 0, CURRENT_TIMESTAMP),
  (0, '劉一', 'liuyi', 'password9', 'f', '0990123456', 'liuyi@example.com', '新竹縣竹北市', '2006-09-09', 0, CURRENT_TIMESTAMP),
  (1, '陳二', 'chener', 'password10', 'm', '0911234567', 'chener@example.com', '苗栗縣苗栗市', '2008-10-10', 0, CURRENT_TIMESTAMP);
  
  -----------------------------------------------------------------------------------------
  
  -- 折價券
drop table IF EXISTS COUPON_TYPE;
CREATE TABLE COUPON_TYPE (
    CP_ID INT AUTO_INCREMENT,
    CP_THRESHOLD INT,
    CP_TP TINYINT NOT NULL CHECK (CP_TP IN (0, 1)),
    CP_NAME VARCHAR(45) NOT NULL,
    CP_DISCOUNT INT NOT NULL,
    CP_START DATETIME NOT NULL,
    CP_END DATETIME NOT NULL,
    CP_STATUS BOOLEAN NOT NULL,
    CP_PIC LONGBLOB,
    PRIMARY KEY (CP_ID)
);


-- 會員折價券
drop table IF EXISTS MEMBERS_CP;
CREATE TABLE MEMBERS_CP (
    CP_ID INT,
    MEM_ID INT,
    CP_USED BOOLEAN NOT NULL,
    PRIMARY KEY (CP_ID, MEM_ID),
    FOREIGN KEY (CP_ID) REFERENCES COUPON_TYPE(CP_ID),
    FOREIGN KEY (MEM_ID) REFERENCES MEMBERS(MEM_ID)
);

-----------------------------------------------------------------------------------------

-- 員工
DROP TABLE IF EXISTS EMP;
CREATE TABLE EMP (
    EMP_ID INT AUTO_INCREMENT,
    EMP_NAME VARCHAR(20) NOT NULL,
    EMP_PHONE VARCHAR(10) NOT NULL,
    EMP_PICTURE LONGBLOB,
    EMP_ACCOUNT VARCHAR(20) NOT NULL,
    EMP_PASSWORD VARCHAR(20) NOT NULL,
    EMP_CLASSIFY TINYINT(1) NOT NULL,
    EMP_STATUS TINYINT(1) NOT NULL,
    EMP_HIREDATE DATE NOT NULL,
    PRIMARY KEY (EMP_ID)
);

-- 客服紀錄
DROP TABLE IF EXISTS MEMBER_SERVICE_RECORD;
CREATE TABLE MEMBER_SERVICE_RECORD (
    MSR_ID INT AUTO_INCREMENT,
    EMP_ID INT NOT NULL,
    MEM_ID INT NOT NULL,
    MSR_TEXT VARCHAR(500),
    MSR_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    DIRECTION TINYINT(1) NOT NULL,
    PRIMARY KEY (MSR_ID),
    FOREIGN KEY (EMP_ID) REFERENCES EMP(EMP_ID),
    FOREIGN KEY (MEM_ID) REFERENCES MEMBERS(MEM_ID)
);

-- 員工功能權限
DROP TABLE IF EXISTS EMP_FUNCTION;
CREATE TABLE EMP_FUNCTION (
    FUNCTION_ID INT AUTO_INCREMENT,
    FUNCTION_CONTENT VARCHAR(300),
    PRIMARY KEY (FUNCTION_ID)
);

-- 員工權限列表
DROP TABLE IF EXISTS EMP_PERMISSION;
CREATE TABLE EMP_PERMISSION (
    EMP_ID INT,
    FUNCTION_ID INT,
    PRIMARY KEY (EMP_ID, FUNCTION_ID),
    FOREIGN KEY (EMP_ID) REFERENCES EMP(EMP_ID),
    FOREIGN KEY (FUNCTION_ID) REFERENCES EMP_FUNCTION(FUNCTION_ID)
);

-- 最新消息
DROP TABLE IF EXISTS NEWS;
CREATE TABLE NEWS (
    NEWS_ID INT AUTO_INCREMENT,
    EMP_ID INT NOT NULL,
    NEWS_CONTENT VARCHAR(5000),
    NEWS_PIC LONGBLOB,
    NEWS_TIME DATETIME NOT NULL,
    PRIMARY KEY (NEWS_ID),
    FOREIGN KEY (EMP_ID) REFERENCES EMP(EMP_ID)
);

-----------------------------------------------------------------------------------------

-- 輪播圖
DROP TABLE IF EXISTS CAROUSEL_PICTURE;
CREATE TABLE CAROUSEL_PICTURE (
    CAR_PIC_ID INT AUTO_INCREMENT,
    CAR_PIC_CONTENT VARCHAR(200),
    CAR_PIC_PIC LONGBLOB,
    CAR_PIC_CLASSIFY TINYINT(1) NOT NULL,
    JOIN_ID INT,
    PRIMARY KEY (CAR_PIC_ID)
);

-----------------------------------------------------------------------------------------

-- 團購商品
DROP TABLE IF EXISTS GROUP_PRODUCT;
CREATE TABLE GROUP_PRODUCT (
  GROUP_PRODUCT_ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  GROUP_PRODUCT_NAME VARCHAR(40) NOT NULL,
  GROUP_PRODUCT_CONTENT VARCHAR(300) NOT NULL,
  GROUP_PRODUCT_PRICE INT NOT NULL,
  GROUP_PRODUCT_STARDATE DATE NOT NULL,
  GROUP_PRODUCT_ENDDATE DATE NOT NULL,
  GROUP_PRODUCT_STATUS BOOLEAN NOT NULL
);

-- 團購方案
drop table IF EXISTS GROUP_ACTIVITY;
CREATE TABLE GROUP_ACTIVITY (
  GROUP_ACTIVITY_ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  GROUP_PRODUCT_ID INT,
  GROUP_ACTIVITY_CONTENT VARCHAR(300) NOT NULL,
  GROUP_ORDER_STAR DATETIME NOT NULL,
  GROUP_ORDER_END DATETIME NOT NULL,
  GROUP_ORDER_MIN INT NOT NULL,
  GROUP_NAME VARCHAR(40),
  GROUP_ORDER_DISCOUNT DECIMAL(3, 2),
  FOREIGN KEY (GROUP_PRODUCT_ID) REFERENCES GROUP_PRODUCT(GROUP_PRODUCT_ID)
);



-- 團購商品圖片
DROP TABLE IF EXISTS GROUP_PRODUCT_IMG;
CREATE TABLE GROUP_PRODUCT_IMG (
    GROUP_PRODUCT_IMG_ID INT PRIMARY KEY,
    GROUP_PRODUCT_ID INT,
    GOURP_PRODUCT_IMG LONGBLOB,
    FOREIGN KEY (GROUP_PRODUCT_ID) REFERENCES GROUP_PRODUCT(GROUP_PRODUCT_ID)
);

-- 團購訂單
DROP TABLE IF EXISTS GROUP_ORDER_MASTER;
CREATE TABLE GROUP_ORDER_MASTER (
    GROUP_ORDER_ID INT PRIMARY KEY,
    MEM_ID INT,
    GROUP_PRODUCT_ID INT,
    NUMBER_OF_PRODUCT INT NOT NULL,
    GROUP_ORDER_STATUS TINYINT NOT NULL DEFAULT 0,
    GROUP_ORDER_BONUS INT,
    TOTAL_GROUP_PRODUCT_PRICE INT,
    FOREIGN KEY (MEM_ID) REFERENCES MEMBERS(MEM_ID),
    FOREIGN KEY (GROUP_PRODUCT_ID) REFERENCES GROUP_PRODUCT(GROUP_PRODUCT_ID)
);

-- 團購訂單明細
DROP TABLE IF EXISTS GROUP_ORDER_DETAIL;
CREATE TABLE GROUP_ORDER_DETAIL (
    GROUP_ORDER_ID INT,
    MEM_ID INT,
    GROUP_ORDER_AMOUNT INT NOT NULL,
    ADDRESS VARCHAR(100) NOT NULL,
    GROUP_PRODUCT_PAYING TINYINT NOT NULL,
    GROUP_PRODUCT_STATUS TINYINT NOT NULL DEFAULT 0,
    GROUP_PRODUCT_OTHERS VARCHAR(150),
    RECEIVER_NAME VARCHAR(50) NOT NULL,
    RECEIVER_ADDRESS VARCHAR(100) NOT NULL,
    RECEIVER_PHONE VARCHAR(10) NOT NULL,
    GROUP_PRODUCT_PRICE INT NOT NULL,
    PRIMARY KEY (GROUP_ORDER_ID, MEM_ID),
    FOREIGN KEY (GROUP_ORDER_ID) REFERENCES GROUP_ORDER_MASTER(GROUP_ORDER_ID),
    FOREIGN KEY (MEM_ID) REFERENCES MEMBERS(MEM_ID)
);

-----------------------------------------------------------------------------------------

-- 甜點類別
DROP TABLE IF EXISTS DESSERT_TYPE;
CREATE TABLE DESSERT_TYPE (
    DESSERT_TYPE_ID INT AUTO_INCREMENT,
    DESSERT_TYPE_NAME VARCHAR(20) NOT NULL UNIQUE,
    PRIMARY KEY (DESSERT_TYPE_ID)
);

-- 甜點
DROP TABLE IF EXISTS DESSERT;
CREATE TABLE DESSERT (
    DESSERT_ID INT AUTO_INCREMENT,
    DESSERT_NAME VARCHAR(30) NOT NULL UNIQUE,
    DESSERT_PRICE INT NOT NULL,
    DESSERT_TYPE_ID INT NOT NULL,
    DESSERT_TIME TIMESTAMP NOT NULL,
    DESSERT_CONTENT VARCHAR(300) NOT NULL,
    DESSERT_STATUS BOOLEAN NOT NULL,
    RATE_NUM INT,
    RATE_STAR INT,
    PRIMARY KEY (DESSERT_ID),
    FOREIGN KEY (DESSERT_TYPE_ID) REFERENCES DESSERT_TYPE(DESSERT_TYPE_ID)
);

-- 甜點收藏
DROP TABLE IF EXISTS LOVE_DESSERT;
CREATE TABLE LOVE_DESSERT (
    DESSERT_ID INT,
    MEM_ID INT,
    PRIMARY KEY (DESSERT_ID, MEM_ID),
    FOREIGN KEY (DESSERT_ID) REFERENCES DESSERT(DESSERT_ID),
    FOREIGN KEY (MEM_ID) REFERENCES MEMBERS(MEM_ID)
);

-- 購物車明細
DROP TABLE IF EXISTS CART_DETAIL;
CREATE TABLE CART_DETAIL (
    DESSERT_ID INT,
    MEM_ID INT,
    CART_DESSERT_AMOUNT INT NOT NULL,
    PRIMARY KEY (DESSERT_ID, MEM_ID),
    FOREIGN KEY (DESSERT_ID) REFERENCES DESSERT(DESSERT_ID),
    FOREIGN KEY (MEM_ID) REFERENCES MEMBERS(MEM_ID)
);

-- 甜點圖片
DROP TABLE IF EXISTS DESSERT_IMG;
CREATE TABLE DESSERT_IMG (
    DESSERT_IMG_ID INT AUTO_INCREMENT,
    DESSERT_IMG LONGBLOB,
    DESSERT_ID INT NOT NULL,
    PRIMARY KEY (DESSERT_IMG_ID),
    FOREIGN KEY (DESSERT_ID) REFERENCES DESSERT(DESSERT_ID)
);

-- 甜點訂單主檔
DROP TABLE IF EXISTS ORDERS;
CREATE TABLE ORDERS (
    ORDER_ID INT AUTO_INCREMENT,
    MEM_ID INT NOT NULL,
    CP_ID INT,
    ORDER_TOTAL INT NOT NULL,
    CP_ORDER_TOTAL INT NOT NULL,
    ORDER_STATUS TINYINT(1) NOT NULL,
    ORDER_TIME TIMESTAMP NOT NULL,
    RECEIVER_PHONE VARCHAR(10) NOT NULL,
    RECEIVER_ADDRESS VARCHAR(100) NOT NULL,
    RECEIVER_NAME VARCHAR(20) NOT NULL,
    PRIMARY KEY (ORDER_ID),
    FOREIGN KEY (MEM_ID) REFERENCES MEMBERS(MEM_ID),
    FOREIGN KEY (CP_ID) REFERENCES MEMBERS_CP(CP_ID)
);

-- 甜點訂單明細
DROP TABLE IF EXISTS ORDER_DETAIL;
CREATE TABLE ORDER_DETAIL (
    ORDER_ID INT,
    DESSERT_ID INT,
    DESSERT_AMOUNT INT NOT NULL,
    DESSERT_PRICE INT NOT NULL,
    DESSERT_REVIEW_DATE TIMESTAMP,
    DESSERT_RATE_STAR INT,
    PRIMARY KEY (ORDER_ID, DESSERT_ID),
    FOREIGN KEY (ORDER_ID) REFERENCES ORDERS(ORDER_ID),
    FOREIGN KEY (DESSERT_ID) REFERENCES DESSERT(DESSERT_ID)
);

-----------------------------------------------------------------------------------------

-- 甜點課程
drop table IF EXISTS course;
create table COURSE (
COURSE_ID INT primary key auto_increment ,
COURSE_NAME VARCHAR(30) NOT NULL unique,
COURSE_PRICE INT NOT NULL,
EMP_ID  INT NOT NULL,
COURSE_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
COURSE_CONTENT VARCHAR(300) NOT NULL,
COURSE_STATUS BOOLEAN NOT NULL,
COURSE_VIDEO  longblob,
RATE_NUM INT,
RATE_STAR INT,
foreign key(EMP_ID) references EMP(EMP_ID) 
);

-- 課程圖片
drop table IF EXISTS COURSE_IMG;
create table COURSE_IMG (
COURSE_IMG_ID INT primary key auto_increment,
COURSE_IMG LONGBLOB,
COURSE_ID INT NOT NULL,
foreign key(COURSE_ID) references COURSE(COURSE_ID)
);

-- 學員留言
drop table IF EXISTS STUDENT_COMMENT;
create table STUDENT_COMMENT (
STUDENT_COMMENT_ID INT primary key auto_increment ,
COURSE_ID INT NOT NULL ,
MEM_ID INT NOT NULL,
STUDENT_COMMENT_CONTENT VARCHAR(300),
STUDENT_COMMENT_DATE DATETIME,
EMP_ID INT,
CHEF_COMMENT_CONTNENT VARCHAR(300),
foreign key(COURSE_ID) references COURSE(COURSE_ID),
foreign key(MEM_ID) references MEMBERS(MEM_ID),
foreign key(EMP_ID) references EMP(EMP_ID)
);

-- 課程訂單主檔
drop table IF EXISTS COURSE_ORDER;
CREATE TABLE COURSE_ORDER (
    COURSE_ORDER_ID INT PRIMARY KEY,
    CP_ID INT,
    MEM_ID INT NOT NULL,
    ORDER_TOTAL INT NOT NULL,
    CP_ORDER_TOTAL INT NOT NULL,
    ORDER_STATUS TINYINT(1) NOT NULL,
    ORDER_TIME TIMESTAMP NOT NULL,
    FOREIGN KEY (MEM_ID) REFERENCES MEMBERS(MEM_ID),
    FOREIGN KEY (CP_ID) REFERENCES MEMBERS_CP(CP_ID)
);

-- 課程訂單明細
drop table IF EXISTS COURSE_ORDER_DETAIL;
CREATE TABLE COURSE_ORDER_DETAIL (
    COURSE_ORDER_ID INT NOT NULL,
    COURSE_ID INT NOT NULL,
    COURSE_PRICE INT NOT NULL,
    COURSE_REVIEW_DATE TIMESTAMP,
    COURSE_RATE_STAR INT,
    PRIMARY KEY (COURSE_ORDER_ID, COURSE_ID),
    FOREIGN KEY (COURSE_ORDER_ID) REFERENCES COURSE_ORDER(COURSE_ORDER_ID),
    FOREIGN KEY (COURSE_ID) REFERENCES COURSE(COURSE_ID)
);

-- 課程蒐藏
drop table IF EXISTS LOVE_COURSE;
CREATE TABLE LOVE_COURSE (
    COURSE_ID INT,
    MEM_ID INT,
    PRIMARY KEY (COURSE_ID, MEM_ID),
    FOREIGN KEY (COURSE_ID) REFERENCES COURSE(COURSE_ID),
    FOREIGN KEY (MEM_ID) REFERENCES MEMBERS(MEM_ID)
);

-- Finish --